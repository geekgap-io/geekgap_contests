import os
import shutil
import random
from solution import find_peak

TEST_CASES_DIR = './test_cases'
INPUTS_DIR = f'{TEST_CASES_DIR}/input'
OUTPUTS_DIR = f'{TEST_CASES_DIR}/output'


def get_input():
    population = [random.randint(0, 20) for i in range(20)]
    nums = random.choices(population=population, k=20)
    return nums


def save_input_case(case_id, *inputs):
    with open(f'{INPUTS_DIR}/input{case_id}.txt', 'w') as fp:
        for el in inputs:
            fp.write(f'{el}\n')


def save_output_case(case_id, *outputs):
    with open(f'{OUTPUTS_DIR}/output{case_id}.txt', 'w') as fp:
        for el in outputs:
            fp.write(f'{el}\n')


def main():
    os.makedirs(INPUTS_DIR, exist_ok=True)
    os.makedirs(OUTPUTS_DIR, exist_ok=True)

    def handle_case(*_, **params):
        case_id = params['case_id']
        nums = params['nums']

        in_nums_str = ' '.join(str(el) for el in nums)
        peak = find_peak(nums)

        save_input_case(case_id, in_nums_str)
        save_output_case(case_id, peak)

    # autogenerated test cases
    for i in range(37):
        case_id = "{:02d}".format(i)
        nums = get_input()
        handle_case(case_id=case_id, nums=nums)


    # the rest are created manually for edge cases
    i += 1
    handle_case(case_id="{:02d}".format(i), nums=[1])

    i += 1
    handle_case(case_id="{:02d}".format(i), nums=list(range(20)))

    i += 1
    nums = list(range(20))
    nums.reverse()
    handle_case(case_id="{:02d}".format(i), nums=nums)


    # zip the test cases folder
    shutil.make_archive(TEST_CASES_DIR, 'zip', TEST_CASES_DIR)


if __name__ == '__main__':
    main()